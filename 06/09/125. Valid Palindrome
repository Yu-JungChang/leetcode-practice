A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.
 
Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.


class Solution:
    def isPalindrome(self, s: str) -> bool:
        i, j = 0, (len(s)-1) #把i, j當兩個指針從字串的頭尾開始往中間檢查
        while i < j :
            while i < j and not s[i].isalnum(): #當i < j且i並非文字,向右+1
                i += 1
            while i < j and not s[j].isalnum(): #當i < j且j並非文字,向左-1
                j -= 1
            if s[i].lower() != s[j].lower(): #把文字i, j轉成小寫, 如果不相等 回傳False
                return False
            i += 1  #一次比對完 i 向右一 j向左一
            j -= 1
        return True
