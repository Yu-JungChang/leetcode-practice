Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

#檢查是否有迴圈

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        fast = head #建立兩個指標,一快一慢,當最後會相遇的話代表有迴圈
        slow = head
        while fast != None and fast.next != None: #先確定至少fast的後兩個是有值的
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
