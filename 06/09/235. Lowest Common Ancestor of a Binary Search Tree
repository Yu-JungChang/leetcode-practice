Given a binary search tree (BST), find the lowest comanmon cestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example 1:

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

Example 2:

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2

#BST -> root是最原始的那個點,再點左邊的枝幹代表數字比較小,右邊比較大
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        small = min(p.val, q.val)
        large = max(p.val, q.val)
        while root:
            if root.val > large:   #當root的值>輸入pq的max值代表pq都在root的左邊
                root = root.left   #所以root往左邊移動
            elif root.val < small: #當root的值<輸入pq的min值代表pq都在root的右邊
                root = root.right  #所以root往右邊移動
            else:
                return root        #都不是的話root就等於lowest common ancestor(離p跟q最近的ancestor)
        return None                #return none 代表break 迴圈
