An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

Return the modified image after performing the flood fill.

Example 1:

Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.

Example 2:

Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0
Output: [[0,0,0],[0,0,0]]
Explanation: The starting pixel is already colored 0, so no changes are made to the image.

class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:
        r, c = len(image), len(image[0]) #程式語言 的XY是反的 image()是row(Y), image(0)是column(X)
        origin_color = image[sr][sc]     #基礎顏色參考點
        def dfs(i, j):                   #DFS深度優先搜尋(開始YX檢查)
            if i < 0 or i>=r or j < 0 or j >= c: #檢查是否超過或達到XY軸極限,達到極限的話回到上一個檢查點 
                return
            if image[i][j] == color or image[i][j] != origin_color: #如果檢查到顏色=新顏色 或 顏色不等於原本顏色的話(代表值不同) 回到上一個檢查點
                return
            image[i][j] = color #否則的話那一格變成新的顏色
            dfs(i+1, j)         #依序+1 -1檢查
            dfs(i-1, j)
            dfs(i,j+1)
            dfs(i, j-1)
        dfs(sr, sc)             #重新定義參考顏色
        return image
